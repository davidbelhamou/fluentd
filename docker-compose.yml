version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - logging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - logging-network

  fluentd:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fluentd
    volumes:
      - ./fluent.conf:/fluentd/etc/fluent.conf
      - app-logs:/var/log/app
      - fluentd-pos:/var/log/fluentd/pos
      - fluentd-buffer:/var/log/fluentd/buffer
    ports:
      - "24231:24231"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - logging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:24231/metrics"]
      interval: 10s
      timeout: 5s
      retries: 5

  setup-data-stream:
    image: curlimages/curl:latest
    container_name: setup-data-stream
    volumes:
      - ./elasticsearch-template.json:/elasticsearch-template.json
      - ./setup-data-stream.sh:/setup-data-stream.sh
    command: ["sh", "/setup-data-stream.sh"]
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - logging-network

  python-random-logger:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: python-random-logger
    volumes:
      - app-logs:/var/log/app
    networks:
      - logging-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      fluentd:
        condition: service_started
      setup-data-stream:
        condition: service_completed_successfully

networks:
  logging-network:
    driver: bridge

volumes:
  elasticsearch-data:
  fluentd-pos:
  fluentd-buffer:
  app-logs: 